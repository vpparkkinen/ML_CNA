d[a1==1,.N] / d[a0==0,.N]
d[a1==0&a0==0,.N] / d[a0==0,.N]
d[a1==0,.N] / d[a0==0,.N]
d[a1==1,] / 10000 - d[a0==1,.N] / 10000
(d[a1==1&a0==0,.N] / d[a0==0,.N]) * d[,mean(a0==0)]
(d[a1==1&a0==0,.N] / d[a0==0,.N]) * d[,mean(a0==0)]
d[a1==1&a0==1,.N] / d[a0==1,.N]
(d[a1==1,.N] / nrow(d)) / (d[a0==1,.N] / nrow(d))
d[,mean(a1==1)]
g <- (d[a1==1&a0==0,.N] / d[a0==0,.N])*d[,mean(a0==0)]
r <- (d[a1==1&a0==1,.N] / d[a0==1,.N])*d[,mean(a0==1)]
g+r
d[a1==1&a0==1,.N] / d[a0==1,.N]
d[a0==0&a1==0,.N] / d[a0==0,.N]
sus <- d[a0==0&a1==1,.N] / d[a0==0,.N] * 1-d[,mean(a0)]
dom <- d[a0==1&a1==1,.N] / d[a0==1,.N] * d[,mean(a0)]
d[,mean(a1)]
sus+dom
d[,mean(a1)] - d[,mean(a0)]
cc <- data.table(exp = rbinom(10000, 1, 0.5))
cc$out <- sapply(cc$exp, \(x) ifelse(x == 1,
rbinom(1,1,0.05),
rbinom(1,1,0.01)))
cc[exp==1 , mean(out)] - cc[exp==0, mean(out)]
cc[exp==1 , mean(out)] / cc[exp==0, mean(out)]
cct1 <- cc[out == 1,]
idx <- sample(1:nrow(cc[out == 0,]), 1000)
cctcont <- rbind(cct1, cc[out == 0,][idx,])
cctcont[exp == 1, mean(out)] - cctcont[exp == 0, mean(out)]
afc <- cctcont[out == 1 & exp ==1 , .N] / cctcont[out == 1 & exp ==0 , .N]
bfd <- cctcont[out == 0 & exp ==1 , .N] / cctcont[out == 0 & exp ==0 , .N]
afc/bfd
exposed <- data.table(exposed = rep(1, 10), outcome = rep(1, 10))
exposed
unexposed <- data.table(exposed = rep(0,10), outcome = rep(c(1,0),5))
unexposed
all <- cbind(exposed, unexposed)
all
all <- rbind(exposed, unexposed)
all
mean(exposed$outcome)
mean(unexposed$outcome)
mean(exposed$outcome)
mean(all$outcome)
mean(exposed$outcome) - 0.5*0.5
mean(exposed$outcome) - 0.5*0.4
mean(all$outcome) - 0.5*0.5
mean(unexposed$outcome) - 0.5*0.5
mean(unexposed$outcome) + 0.5*0.5
mean(unexposed$outcome) + 0.5*0
mean(unexposed$outcome) + 0.5*1
mean(exposed$outcome)*0.5 - 0.5
mean(exposed$outcome)
mean(unexposed$outcome) + 0.5*1
mean(unexposed$outcome) + 0.5*0.5
mean(unexposed$outcome) + 0.5*0.25
exposed <- data.table(exposed = rep(1, 8), outcome = rep(1, 8))
exposed <- data.table(exposed = rep(1, 8), outcome = rep(1, 8))
unexposed <- data.table(exposed = rep(0,16), outcome = rep(c(1,0),4))
all <- rbind(exposed, unexposed)
all
exposed <- data.table(exposed = rep(1, 8), outcome = rep(1, 8))
unexposed <- data.table(exposed = rep(0,8), outcome = rep(c(1,0),4))
all <- rbind(exposed, unexposed)
all
mean(unexposed$outcome)
mean(exposed$outcome)
mean(unexposed$outcome) + 0.5*0.5
mean(unexposed$outcome) + 0.5*0.5
mean(unexposed$outcome) + 0.5*0.25
exposed <- data.table(exposed = rep(1, 4), outcome = rep(1, 4))
unexposed <- data.table(exposed = rep(0,12), outcome = rep(c(1,0),3))
all <- rbind(exposed, unexposed)
all
mean(unexposed$outcome)
mean(all$outcome)
exposed <- data.table(exposed = rep(1, 8), outcome = rep(1, 8))
unexposed <- data.table(exposed = rep(0,8), outcome = rep(c(1,0),4))
all <- rbind(exposed, unexposed)
all
mean(unexposed$outcome) + 0.5*0.25
mean(exposed$outcome)*0.5 - 0.5
mean(exposed$outcome) - 0.5*0.5
mean(exposed$outcome) - 0.5*0.75
mean(unexposed$outcome) * 2*0.5
mean(unexposed$outcome) * 2*0.25
mean(unexposed$outcome)
mean(unexposed$outcome) * 2*1
mean(unexposed$outcome) *2*0.5
1/0.5
mean(unexposed$outcome) *2*0.75
mean(exposed$outcome) - 0.5*0.75
1*.5 + .5 * .5
mean(exposed$outcome) / 2*0.5
mean(all$outcome)
mean(unexposed$outcome) + 0.5 * 0.5
mean(unexposed$outcome) + 0.5 * 0.25
mean(unexposed$outcome)*2 * 0.25
mean(all$outcome)
0.5*0.5*2
(1-0.5)*0.5
0.5*0.5*2 + (1-0.5)*0.5
mean(all$outcome)
0.5(1-0.25+0.5*2)
0.5*(1-0.25+0.5*2)
0.5*(1-0.25+0.25*2)
exposed <- data.table(exposed = rep(1, 8), outcome = rep(1, 6))
unexposed <- data.table(exposed = rep(0,8), outcome = rep(c(1,0),4))
all <- rbind(exposed, unexposed)
all
mean(all$outcome)
exposed <- data.table(exposed = rep(1, 8), outcome = rep(1, 6))
unexposed <- data.table(exposed = rep(0,8), outcome = rep(c(1,0),4))
exposed <- data.table(exposed = rep(1, 8), outcome = c(rep(1, 6), c(0,0))
)
exposed
unexposed <- data.table(exposed = rep(0,8), outcome = rep(c(1,0),4))
all <- rbind(exposed, unexposed)
mean(all$outcome)
6/8
mean(unexposed$outcome)* 0.25 * 0.5
mean(unexposed$outcome) + 0.25 * 0.5
mean(unexposed$outcome)
mean(unexposed$outcome) + 0.25 * 0.5
mean(unexposed$outcome) + 0.25 * 0.25
exposed <- data.table(exposed = rep(1, 4), outcome = c(rep(1, 3), c(0)))
exposed
unexposed <- data.table(exposed = rep(0,8), outcome = rep(c(1,0),4))
unexposed <- data.table(exposed = rep(0,12), outcome = rep(c(1,0),5))
unexposed <- data.table(exposed = rep(0,12), outcome = rep(c(1,0),6))
unexposed
all <- rbind(exposed, unexposed)
mean(all$outcome)
mean(unexposed$outcome) + 0.25 * 0.25
mean(unexposed$outcome)
all
.75*0.5
.75*0.5 + 0.5+0.25*0.25
all[exposed == 1, mean(outcome)]
all[exposed == 0, mean(outcome)]
0.75*0.25
0.75*0.25 + (0.5+0.25)*0.25
mean(all$outcome)
0.75*0.5 + (0.5+0.25)*0.25
0.5 + 0.25*0.25
mean(unexposed$outcome)
all[, mean(exposed)]
mean(exposed$outcome) / mean(unexposed$outcome)
0.5 * 0.5+0.5 +
mean(unexposed$outcome) - all[, mean(exposed)] * mean(unexposed$outcome) + all[, mean(exposed)] * 1.5 * 0.5
0.5 * 0.5+0.5 +
mean(unexposed$outcome) - (all[, mean(exposed)] * mean(unexposed$outcome)) + (all[, mean(exposed)] * 1.5 * 0.5)
B <- mean(unexposed$outcome)
B
RR <- mean(exposed$outcome) / mean(unexposed$outcome)
RR
P <- all[,mean(exposed)]
P
(1-P)*B + P*(R*B)
(1-P)*B + P*(RR*B)
B-P*B + P*RR*B
RD <- mean(exposed$outcome) - mean(unexposed$outcome)
B + RD*P
install.packages("frscore")
library(frscore)
?cna
ccm_table <- expand.grid(c(1,3,5,7), c(2,4,6,8))
rtf <- \() sample(c(T,F), 1)
for(i in 1:nrow(ccm_table)){
ctrlargs <- list(inus.only = rtf(),
inus.def = sample(c("implication", "equivalence"),1),
rm.const.factors = rtf(),
rm.dup.factors = rtf(),
only.minimal.msc = rtf(),
only.minimal.asf = rtf())
expect_no_error(
suppressWarnings(frscored_cna(d.error,
measures = c(ccm_table[i,1], ccm_table[i,2]),
control = do.call(cnaControl, ctrlargs)),
)
)
}
library(testthat)
test_that("frscored_cna applies cna params via cnaControl without failing", {
sdf
dsf
d
test_that("frscored_cna applies cna params via cnaControl without failing", {
test_that("frscored_cna applies cna params via cnaControl without failing", {
for(i in 1:nrow(ccm_table)){
for(i in 1:nrow(ccm_table)){
ctrlargs <- list(inus.only = rtf(),
inus.def = sample(c("implication", "equivalence"),1),
rm.const.factors = rtf(),
rm.dup.factors = rtf(),
only.minimal.msc = rtf(),
only.minimal.asf = rtf())
suppressWarnings(frscored_cna(d.error,
measures = c(ccm_table[i,1], ccm_table[i,2]),
control = do.call(cnaControl, ctrlargs)),
)
}
showConCovMeasures()
cna(d.error, measures = c(1,3))
frscored_cna(d.error, measures = c(1,3))
frscored_cna(d.error, measures = c(1,2))
showConCovMeasures()
frscored_cna(d.error, measures = c(1,3))
cna(d.error, measures = c(1,3))
cna(d.error, measures = c(1,3))
frscored_cna(d.error, measures = c(1,3))
frscored_cna(d.error, measures = c(1,3), output = "asf")
cna(d.error, measures = c("scon","scov"))
cna(d.error, measures = c("scon","scon"))
showConCovMeasures()
cna(d.error, measures = c("scon","ccon"))
cna(d.error, measures = c("scov","ccov"))
cna(d.error, measures = c("scon","scon"))
showConCovMeasures()
cna(d.error, measures = c("scon","ccon"))
cna(d.error)
csf(cna(d.error))
cna(d.error, measures = c("scon","ccon"))
csf(cna(d.error, measures = c("scon","ccon")))
asf(cna(d.error, measures = c("scon","ccon")))
cna(d.error)
cna(d.error, measures = c("scon","scon"))
cna(d.error, measures = c("scon","scov"))
cna(d.error, measures = c("scon","ccon"))
cna(d.error, measures = c("scon","ccon")) |> csf()
dd <- frscored_cna(d.error)
dd$rean.results
unique(dd$rean.results$condition
unique(dd$rean.results$condition)
library(frscore)
dd <- frscored_cna(d.error)
install.packages("rpart")
library(rpart)
source("../funcs_datgen.R")
if(is.na(Sys.getenv("RSTUDIO", unset = NA))){
setwd(system2("pwd", stdout = TRUE)) # if not in RStudio, assume R runs in
} else {                               # a shell. otherwise assume RStudio
path <- rstudioapi::getActiveDocumentContext()$path
Encoding(path) <- "UTF-8"
setwd(dirname(path))
}
library(rpart)
source("../funcs_datgen.R")
set.seed(42)
sample_split <- sample.split(Y = iris$Species, SplitRatio = 0.75)
library(cna)
library(randomForest)
library(caret)
library(data.table)
library(parallel)
library(tidypredict)
set.seed(42)
sample_split <- sample.split(Y = iris$Species, SplitRatio = 0.75)
library(caTools)
install.packages("caTools")
?caTools
library(caTools)
?caTools
ttsplit <- function(x, split){
ind <- sample(2, nrow(x),
replace = TRUE,
prob = split)
train <- x[ind==1,]
test <- x[ind==2,]
return(list(train=train, test=test))
}
?sample.split
set.seed(42)
sample_split <- sample.split(Y = iris$Species, SplitRatio = 0.75)
train_set <- subset(x = iris, sample_split == TRUE)
test_set <- subset(x = iris, sample_split == FALSE)
train_set
sample_split
sample_split <- sample.split(Y = iris$Species, SplitRatio = 0.75)
train_set <- subset(x = iris, sample_split == TRUE)
test_set <- subset(x = iris, sample_split == FALSE)
train_set
test_set
table(test_set$Species)
table(train_set$Species)
table(iris$Species)
model <- rpart(Species ~ ., data = train_set, method = "class")
model
tidypredict_fit(model)
#library(rpart)
library(tree)
install.packages("tree")
#library(rpart)
library(tree)
?tree
?as.formula
fde <- d.error
fde <- frscore::d.error
fde$E <- as.factor(fde$E)
fde
tree(E ~ ., fde)
t <- tree(E ~ ., fde)
t
tidypredict_fit(t)
?tidypredict_fit
path.rpart(model)
model <- rpart(Species ~ ., data = train_set, method = "class")
path.rpart(model)
path.rpart(model, node = 1:tree_model$frame$n)
path.rpart(model, node = 1:model$frame$n)
model
?path.rpart
model$frame
path.rpart(model, nodes = 1:model$frame$n)
path.rpart(model, nodes = 1:model$frame$n)
model <- rpart(E ~ ., data = fde, method = "class")
model
path.rpart(model, nodes = 1:model$frame$n)
install.packages("frscore")
library(frscore)
d <- frscored_cna(d.error)
plot_submodel_network(d)
if(is.na(Sys.getenv("RSTUDIO", unset = NA))){
setwd(system2("pwd", stdout = TRUE)) # if not in RStudio, assume R runs in
} else {                               # a shell. otherwise assume RStudio
path <- rstudioapi::getActiveDocumentContext()$path
Encoding(path) <- "UTF-8"
setwd(dirname(path))
}
source("../funcs_datgen.R")
library(cna)
library(randomForest)
library(caret)
library(data.table)
library(parallel)
install.packages("parsnip")
library(parsnip)
if(is.na(Sys.getenv("RSTUDIO", unset = NA))){
setwd(system2("pwd", stdout = TRUE)) # if not in RStudio, assume R runs in
} else {                               # a shell. otherwise assume RStudio
path <- rstudioapi::getActiveDocumentContext()$path
Encoding(path) <- "UTF-8"
setwd(dirname(path))
}
library(rpart)
#library(tree)
library(caTools)
library(cna)
library(randomForest)
library(caret)
library(data.table)
library(parallel)
library(tidypredict)
library(parsnip)
source("../funcs_datgen.R")
set.seed(42)
sample_split <- sample.split(Y = iris$Species, SplitRatio = 0.75)
train_set <- subset(x = iris, sample_split == TRUE)
test_set <- subset(x = iris, sample_split == FALSE)
fde$E <- as.factor(fde$E)
model <- rpart(E ~ ., data = fde, method = "class")
path.rpart(model, nodes = 1:model$frame$n)
rpart.rules()
model <- decision_tree(tree_depth = 3) |>
set_mode("classification") |>
set_engine("rpart") |>
fit(E ~., data = fde)
model
extract_fit_engine(model)
extract_fit_engine(model)
model
extract_fit_engine(model)
extract_fit_engine(model) |> rpart.rules()
install.packages("rpart.plot")
library(rpart.plot)
model <- rpart(E~., fde, method = "class")
model
rpart.rules(model)
?rpart
fde <- replicate(100, fde, simplify = F)
fde
fde <- replicate(100, fde, simplify = F) |> rbindlist()
fde <- replicate(100, fde, simplify = F)
fde
fde <- d.error
fde$E <- as.factor(fde$E)
fde <- replicate(100, fde, simplify = F)
fde
fde <- rbindlist(fde)
fde
model <- rpart(E~., fde, method = "class")
rpart.rules(model)
rules <- rpart.rules(model)
rules
str(rules)
rules[1,]
rules[1,2]
rules
length(rules)
rules[1,17]
rules[1,]
rules[1,1]
colnames(rules)
t(rules)
rules
t(rules)
t(rules)[,1]
rules[rules[,1]=="1.00"]
rules[rules[,1]=="1.00",]
rules <- rules[rules[,1]=="1.00",]
rules
rules[1,]
str(rules[1,])
rules[1,]
rules
do.call(paste, rules)
outcome <- "E"
out_value <- selectCases(outcome, fde[,outcome])
fde$E <- as.factor(fde$E)
fde <- replicate(100, fde, simplify = F)
fde <- do.call(rbind, fde)
fde
fde <- d.error
fde$E <- as.factor(fde$E)
fde <- replicate(100, fde, simplify = F)
fde <- do.call(rbind, fde)
fde
outcome <- "E"
out_value <- selectCases(outcome, fde[,outcome])
fde[,outcome]
out_value <- selectCases(outcome, fde)[,outcome]
fde <- d.error
fde$E <- as.factor(fde$E)
fde <- replicate(100, fde, simplify = F)
fde <- do.call(rbind, fde)
fde
model <- rpart(E~., fde, method = "class")
rules <- rpart.rules(model)
rules
fde <- apply(fde, 2, as.integer)
fde
fde <- d.error
fde <- apply(fde, 2, as.integer)
fde
fde$E <- as.factor(fde$E)
fde <- replicate(100, fde, simplify = F)
fde <- do.call(rbind, fde)
fde
model <- rpart(E~., fde, method = "class")
rules <- rpart.rules(model)
fde <- d.error
fde <- apply(fde, 2, as.integer, simplify = FALSE)
fde
?apply
fde <- d.error
fde <- as.data.frame(apply(fde, as.integer, simplify = FALSE))
fde <- d.error
fde <- as.data.frame(apply(fde, 2, as.integer))
fde
fde$E <- as.factor(fde$E)
fde <- replicate(100, fde, simplify = F)
fde <- do.call(rbind, fde)
model <- rpart(E~., fde, method = "class")
rules <- rpart.rules(model)
rules
rules <- rpart.rules(model)
rules
rules <- rules[rules[,1] == "1.00",]
rules
rules <- do.call(paste, rules[,3:length(rules)])
rules
sapply(rules, \(x) gsub(" *^", ""))
sapply(rules, \(x) gsub(" *^", "", x))
sapply(rules, \(x) gsub(" *$", "", x))
rules <- sapply(rules, \(x) gsub(" *$", "", x), USE.NAMES = FALSE)
rules
rules <- sapply(rules, \(x) gsub(" ", "", x), USE.NAMES = FALSE)
rules
rules <- sapply(rules, \(x) gsub("&", "*", x), USE.NAMES = FALSE)
rules
rtree2suff <- function(model){
pattern_neg <- "([A-Za-z0-9]*)is0"
pattern_pos <- "([A-Za-z0-9]*)is1"
matches <- gregexpr(pattern_neg, model)
regmatches(model, matches) <- lapply(
regmatches(model, matches), \(x) tolower(gsub("is0", "", x))
)
matches <- gregexpr(pattern_pos, model)
regmatches(model, matches) <- lapply(
regmatches(model, matches), \(x) toupper(gsub("is1", "", x))
)
return(model)
}
rtree2suff("Ais1*Bis0*Cis1*Dis1")
suffs <- sapply(rules, rtree2suff, USE.NAMES = FALSE)
suffs
?gregexpr
pattern_neg <- "([A-Za-z0-9]*)is0"
pattern_pos <- "([A-Za-z0-9]*)is1"
matches <- gregexpr(pattern_neg, model)
matches
model
gregexpr(pattern_neg, "Ais1*Bis0*Cis1*Dis1")
?regmatches
debugonce(rtree2suff)
debugonce(rtree2suff)
rtree2suff("Ais1*Bis0*Cis1*Dis1")
matches
model
model
matches
model
